from pygments.token import Error
import math
import random
import numpy as np

import matplotlib.pyplot as plt

#vector difference p1-p2
def subtract(p1,p2):
  return (p1[0]-p2[0], p1[1]-p2[1])

#Compute the angle made by three points (the angle <p1p2p3)
def angle(p1,p2,p3):
  v1=subtract(p1,p2)
  v2=subtract(p3,p2)
  return np.math.atan2(np.linalg.det([v1,v2]),np.dot(v1,v2))

#distance between two points
def dist(p1,p2):
  return math.sqrt((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)


#does the line p1p2 intersect the line segment p3p4?
def lineintseg(p1,p2,p3,p4):
  if p1[0]-p2[0]==0 and p3[0]-p4[0]==0:
    if p1[0]==p3[0]:
      return True
    else: return False
  if p1[0]-p2[0]!=0 and p3[0]-p4[0]!=0 and (p1[1]-p2[1])*(p3[0]-p4[0])==(p3[1]-p4[1])*(p1[0]-p2[0]):
    if (p1[1]-p2[1])*(p1[0]-p4[0])==(p1[1]-p4[1])*(p1[0]-p2[0]):
      return True
    else: return False
  return (p3[0]==p4[0] and ybetween(p3,intersect(p1,p2,p3,p4),p4)) or (p3[0]!=p4[0] and xbetween(p3,intersect(p1,p2,p3,p4),p4))

#Plot a piecewice linear curve.  Input vertices in cyclic order
def plotline(p):
  for i in range(len(p)-1):
    plt.plot([p[i][0],p[i+1][0]],[p[i][1],p[i+1][1]], marker='o')

#A list of points called p
p=[[0,0],[1,1],[2,4],[3,9]]

#plot a set of points
def plotpoints(p):
    for i in range(len(p)):
        plt.plot([p[i][0],p[i][0]],[p[i][1],p[i][1]], marker='o')

#plot a polygon.  Input vertices in cyclic order
def plotpoly(p):
  for i in range(len(p)-1):
    plt.plot([p[i][0],p[i+1][0]],[p[i][1],p[i+1][1]], marker='o')
  plt.plot([p[len(p)-1][0],p[0][0]],[p[len(p)-1][1],p[0][1]])

#From a set of points, find one with smallest y-value
def smally(p):
  p1=p[0]
  for i in range(len(p)):
    if p[i][1]<p1[1]: p1=p[i]
  return p1

#vector difference p1-p2
def subtract(p1,p2):
  return (p1[0]-p2[0], p1[1]-p2[1])

#is the x-coordinate of p2 between the x-coordinates of p1 and p3?
def xbetween(p1,p2,p3):
  return p1[0]<=p2[0]<=p3[0] or p3[0]<=p2[0]<=p1[0]

#is the y-coordinate of p2 between the y-coordinates of p1 and p3?
def ybetween(p1,p2,p3):
  return p1[1]<=p2[1]<=p3[1] or p3[1]<=p2[1]<=p1[1]

#point of intersection of the lines p1p2 and p3p4
def intersect(p1,p2,p3,p4):
    return (-((p1[0] - p2[0])*(p3[1]*p4[0] - p3[0]*p4[1]) - (p3[0] - p4[0])*(p1[1]*p2[0] - p1[0]*p2[1]))/((p1[0] - p2[0])*(p4[1] - p3[1]) - (p2[1] - p1[1])*(p3[0] - p4[0]))), -(-p1[0]*p2[1]*p3[1] + p1[0]*p2[1]*p4[1] + p1[1]*p2[0]*p3[1] - p1[1]*p2[0]*p4[1] + p1[1]*p3[0]*p4[1] - p1[1]*p3[1]*p4[0] - p2[1]*p3[0]*p4[1] + p2[1]*p3[1]*p4[0])/(p1[0]*p3[1] - p1[0]*p4[1] - p1[1]*p3[0] + p1[1]*p4[0] - p2[0]*p3[1] + p2[0]*p4[1] + p2[1]*p3[0] - p2[1]*p4[0]) 

### BEGIN PYTHON HW 1 ###

class NotColinearError(Exception):
  pass

class NotDistinctPointsError(Exception):
  pass

#point of intersection of the lines p1p2 and p3p4
#improved from original intersect(p1,p2,p3,p4) function to include parallel lines
def intersection(p1,p2,p3,p4):
  try:
    return (-((p1[0] - p2[0])*(p3[1]*p4[0] - p3[0]*p4[1]) - (p3[0] - p4[0])*(p1[1]*p2[0] - p1[0]*p2[1]))/((p1[0] - p2[0])*(p4[1] - p3[1]) - (p2[1] - p1[1])*(p3[0] - p4[0]))), -(-p1[0]*p2[1]*p3[1] + p1[0]*p2[1]*p4[1] + p1[1]*p2[0]*p3[1] - p1[1]*p2[0]*p4[1] + p1[1]*p3[0]*p4[1] - p1[1]*p3[1]*p4[0] - p2[1]*p3[0]*p4[1] + p2[1]*p3[1]*p4[0])/(p1[0]*p3[1] - p1[0]*p4[1] - p1[1]*p3[0] + p1[1]*p4[0] - p2[0]*p3[1] + p2[0]*p4[1] + p2[1]*p3[0] - p2[1]*p4[0]) 
  except ZeroDivisionError: #parallel case
    if y_int(p1,p2)==y_int(p3,p4):
      return True #colinear
    else:
      return False #never intersects

#calculates slope between points
def slope(p1,p2):
  try:
    slope=(p1[1]-p2[1])/(p1[0]-p2[0])
  except ZeroDivisionError:
    return False
  return slope

#calculates y-intercept of line
def y_int(p1,p2):
  m=slope(p1,p2)
  if m==False:
    return False
  else:
    return p2[1]-(p2[0]*m)

#tests three points for colinearity
def colinear(p1,p2,p3):
  if (slope(p1,p2)==slope(p2,p3) and y_int(p1,p2)==y_int(p2,p3)):
    return True
  else:
    return False

#Given three points on a line p1, p2, and p3, checks if p2 and p3 are on the same side of p1. (Python 1 #1)
def check_points_on_same_side(p1,p2,p3):
  if not colinear(p1,p2,p3):
    raise NotColinearError("The points are not on the same line.")
  if p1==p2 or p1==p3 or p2==p3:
    raise NotDistinctPointsError("The points are not distinct.")
  #The points are on a vertical line
  if slope(p1,p2)==False:
    if (p2[1]>p1[1] and p3[1]>p1[1]) or (p2[1]<p1[1] and p3[1]<p1[1]):
      return True
    else:
      return False
  #Otherwise:
  else: 
    if (p1[0]<p2[0] and p1[0]<p3[0]) or (p1[0]>p2[0] and p1[0]>p3[0]):
      return True
    else:
      return False

#Given four points p1, p2, p3, and p4, checks if the ray p1p2 intersects the line segment p3p4. (Python 1 #2)
def does_ray_intersect_lineseg(p1,p2,p3,p4):
  if (p1==p2) or (p3==p4):
    raise NotDistinctPointsError("These are not distinct endpoints.")
  elif slope(p1,p2)==slope(p3,p4):
    if y_int(p1,p2)==y_int(p3,p4): #the ray and line segment lie along the same line
      if p2[0]>p1[0]:
        if max(p3[0],p4[0])>=p1[0]:
          return True
        else:
          return False
      else:
        if min(p3[0],p4[0])<=p1[0]:
          return True
        else:
          return False
    else: #the ray and line segment are parallel and will never intersect 
      return False
  elif (intersection(p1,p2,p3,p4)[0]>=p3[0] and intersection(p1,p2,p3,p4)[0]<=p4[0]) or (intersection(p1,p2,p3,p4)[0]<=p3[0] and intersection(p1,p2,p3,p4)[0]>=p4[0]):
    if p1[0]>p2[0] and intersection(p1,p2,p3,p4)[0]<=p1[0]:
      return True
    elif p1[0]<p2[0] and intersection(p1,p2,p3,p4)[0]>=p1[0]:
      return True
    else:
      return False
  else:
    return False

#Given four points p1, p2, p3, p4, checks if the line segments p1p2 and p3p4 intersect. (Python 1 #3)
def do_linesegs_intersect(p1,p2,p3,p4):
  if (p1==p2) or (p3==p4):
    raise NotDistinctPointsError("These are not distinct endpoints.")
  ints=intersection(p1,p2,p3,p4)
  if ints==False:
    return False
  elif ints==True:
    if max(p1[0],p2[0])>=min(p3[0],p4[0]) and min(p1[0],p2[0]<=max(p3[0],p4[0])):
      return True
    else:
      return False
  else:
    if xbetween(p1,ints,p2) and xbetween(p3,ints,p4):
      return True
    else:
      return False

#Checks if lines p1p2 and p3p4 are parallel (Python 1 #4)
def is_parallel(p1,p2,p3,p4):
  if (p1==p2) or (p3==p4):
    raise NotDistinctPointsError("These are not distinct endpoints.")
  if slope(p1,p2)==slope(p3,p4):
    return True
  else:
    return False

#Given a point p1 and a polygon P, output p2 such that it is not parallel to any sides of P (Python 1 #5)
def find_p2_not_parallel_to_P(p1,P):
  slopes=[]
  for i in range(len(P)):
    if i<(len(P)-1):
      slopes.append(slope(P[i],P[i+1]))
    else:
      slopes.append(slope(P[i],P[0]))
  maxslope=max(slopes)+1
  return [p1[0]+1,p1[1]+maxslope]

#Given a point p1 and a polygon P, check if p1 is in the boundary of P (Python 1 #8)
def check_if_in_boundary(p1,P):
  if colinear(P[len(P)-1],P[0],p1) and xbetween(P[len(P)-1],p1,P[0]):
    return True
  else:
    for i in range(len(P)-1):
      if colinear(P[i],P[i+1],p1) and xbetween(P[i],p1,P[i+1]):
        return True
      else:
        continue
    return False

## BEGIN PYTHON HW 2 ##

def check_2_visibility_polygon(p, P):
  for i in range(len(P)):
    crosses=0
    for j in range(len(P)):
      if do_linesegs_intersect(p,P[i],P[j],P[(j+1)%len(P)]):
        crosses+=1
    if crosses <= 2:
      return False
  return True

## BEGIN PYTHON HW 3 ##

def check_S_in_demiplane(S,p1,p2):
  base=S[0]
  direction=np.sign(angle(p1,p2,S[0]))
  for s in S:
    if np.sign(angle(p1,p2,s))!=direction:
      return False
  return True

#print(check_S_in_demiplane([[1,1],[1,3],[3,1]],[0,0],[10,0])) #True!
#print(check_S_in_demiplane([[1,1],[1,3],[3,-1]],[0,0],[10,0])) #False!

## BEGIN PYTHON HW 4 ##

def point_in_triangle(p,triangle): #If the sum of the angles between p and two vertices of the triangle is equal to 2*pi, then the point is within the triangle. Otherwise, no!
  print(angle(triangle[0],p,triangle[1]))
  print(angle(triangle[0],p,triangle[2]))
  print(angle(triangle[2],p,triangle[1]))
  print(np.abs(angle(triangle[0],p,triangle[1]))+np.abs(angle(triangle[0],p,triangle[2]))+np.abs(angle(triangle[1],p,triangle[2])))
  print(2*math.pi)
  if (np.abs(angle(triangle[0],p,triangle[1]))+np.abs(angle(triangle[0],p,triangle[2]))+np.abs(angle(triangle[1],p,triangle[2])))==(2*math.pi):
    return True
  return False

def which_triangle(p,triangles):
  for triangle in triangles:
    if point_in_triangle(p,triangle):
      return triangle
  return False
